import Std.Convert.ResultArrayAsInt;
import Std.Math.BitSizeI;


operation GenerateRandomBit(): Result{
    use q = Qubit();
    H(q);
    let result = M(q);
    Reset(q);

    return result;
}


operation GenerateRandomNumberInRange(max: Int,min: Int): Int{
    mutable bits = [];
    // Determine how many bits are required to store `max`
    let nBits = BitSizeI(max);

    // Add the bits generated by `GenerateRandomBit()` 
    for idxBit in 1..nBits{
        set bits += [GenerateRandomBit()];
    }
    // Convert the bits to integer
    let sample = ResultArrayAsInt(bits);

    // Check wether the integer exceeds `max` and doesn't drop below `min` or not
    if sample < min or sample > max {
        return GenerateRandomNumberInRange(max, min);
    } else {
        return sample;
    }
}

operation Main(): Int{
    let max = 100;
    let min = 10;
    Message($"Sampling a random number between {min} and {max}: ");
    return GenerateRandomNumberInRange(max, min);
}

// Bonus exercise
// Try to modify the program to also require the generated random number to be greater than some minimum number, min, instead of zero. (completed)
